{"ast":null,"code":"//\nexport function bubbleSort(arr, animations, cout) {\n  let i = 0;\n  let j = 0;\n\n  if (i < arr.length) {\n    for (let j = 0; j < arr.length - i - 1; j++) {\n      let a = arr[j];\n      let b = arr[j + 1];\n\n      if (a > b) {\n        swap(arr, j, j + 1);\n        animations.push([j, j + 1, true, cout]);\n      }\n    }\n  } else {\n    i = 0;\n    return animations;\n  }\n\n  i++;\n  return animations;\n}\n\nconst swap = (arr, a, b) => {\n  let temp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = temp;\n};\n\nexport function mergeSort(arr) {\n  const animations = [];\n  if (arr.length <= 1) return arr;\n  const auxArr = arr.slice();\n  mergeSortHelper(arr, 0, arr.length - 1, auxArr, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxArr, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxArr, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxArr, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxArr, animations);\n} //\n\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j, false]);\n    animations.push([i, j, false]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      //swaping below\n      animations.push([k, auxiliaryArray[i], true, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      //swaping below\n      animations.push([k, auxiliaryArray[j], true, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    animations.push([i, i, false]);\n    animations.push([i, i, false]); //swaping below\n\n    console.log(auxiliaryArray[i], i);\n    animations.push([k, auxiliaryArray[i], true, auxiliaryArray[k]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push([j, j, false]);\n    animations.push([j, j, false]); //swapping below\n\n    console.log(auxiliaryArray[j], mainArray[j]);\n    animations.push([k, auxiliaryArray[j], true, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nfunction quickSwap(items, leftIndex, rightIndex) {\n  var temp = items[leftIndex];\n  items[leftIndex] = items[rightIndex];\n  items[rightIndex] = temp;\n}\n\nfunction partition(items, left, right, animations) {\n  var pivot = items[Math.floor((right + left) / 2)],\n      //middle element\n  i = left,\n      //left pointer\n  j = right; //right pointer\n\n  while (i <= j) {\n    while (items[i] < pivot) {\n      i++;\n    }\n\n    while (items[j] > pivot) {\n      j--;\n    }\n\n    if (i <= j) {\n      quickSwap(items, i, j); //swapping two elements\n\n      animations.push([i, j, true]);\n      i++;\n      j--;\n    }\n  }\n\n  return i;\n}\n\nexport function quickSort(items, left, right, animations) {\n  var index;\n\n  if (items.length > 1) {\n    index = partition(items, left, right, animations); //index returned from partition\n\n    if (left < index - 1) {\n      //more elements on the left side of the pivot\n      quickSort(items, left, index - 1, animations);\n    }\n\n    if (index < right) {\n      //more elements on the right side of the pivot\n      quickSort(items, index, right, animations);\n    }\n  }\n\n  return items;\n}\nexport function insertionSort(arr, animations) {\n  for (let i = 0; i < arr.length; i++) {\n    let curr = arr[i];\n    let j = i - 1;\n\n    while (j >= 0 && arr[j] > curr) {\n      arr[j + 1] = arr[j];\n      animations.push([j, j + 1]);\n      j--;\n    }\n\n    arr[j + 1] = curr;\n  }\n\n  return animations;\n}","map":{"version":3,"names":["bubbleSort","arr","animations","cout","i","j","length","a","b","swap","push","temp","mergeSort","auxArr","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","auxiliaryArray","k","console","log","quickSwap","items","leftIndex","rightIndex","partition","left","right","pivot","quickSort","index","insertionSort","curr"],"sources":["/Users/Jake.Squier/SE-Projects/sorting-visualizer/Sorting-Visualizer/src/sortingAlgorithims.js"],"sourcesContent":["//\nexport function bubbleSort(arr, animations, cout){\n    let i = 0;\n    let j = 0;\n    if (i < arr.length) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          let a = arr[j];\n          let b = arr[j + 1];\n          if (a > b) {\n            swap(arr, j, j + 1);\n            animations.push([j, j+1, true, cout])\n          }\n        }\n      } else {\n        i = 0;\n        return animations;\n      }\n      i++;\n      return animations;\n}\n\nconst swap = (arr, a, b) => {\n    let temp = arr[a];\n    arr[a] = arr[b];\n    arr[b] = temp;\n};\n\nexport function mergeSort(arr){\n    const animations = [];\n    if(arr.length <= 1) return arr;\n    const auxArr = arr.slice();\n    mergeSortHelper(arr, 0, arr.length - 1, auxArr, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxArr,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxArr, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxArr, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxArr, animations);\n}\n//\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j, false]);\n    animations.push([i, j, false]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      //swaping below\n      animations.push([k, auxiliaryArray[i], true, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      //swaping below\n      animations.push([k, auxiliaryArray[j], true, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i, false]);\n    animations.push([i, i, false]);\n    //swaping below\n    console.log(auxiliaryArray[i], i)\n    animations.push([k, auxiliaryArray[i], true, auxiliaryArray[k]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j, false]);\n    animations.push([j, j, false]);\n    //swapping below\n    console.log(auxiliaryArray[j], mainArray[j])\n    animations.push([k, auxiliaryArray[j], true,  auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nfunction quickSwap(items, leftIndex, rightIndex) {\n    var temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n}\n\nfunction partition(items, left, right, animations) {\n    var pivot   = items[Math.floor((right + left) / 2)], //middle element\n    i       = left, //left pointer\n    j       = right; //right pointer\n    while (i <= j) {\n        while (items[i] < pivot) {\n            i++;\n        }\n        while (items[j] > pivot) {\n            j--;\n        }\n        if (i <= j) {\n            quickSwap(items, i, j); //swapping two elements\n            animations.push([i, j, true])\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\nexport function quickSort(items, left, right, animations) {\n    var index;\n    if (items.length > 1) {\n        index = partition(items, left, right, animations); //index returned from partition\n        if (left < index - 1) { //more elements on the left side of the pivot\n            quickSort(items, left, index - 1, animations);\n        }\n        if (index < right) { //more elements on the right side of the pivot\n            quickSort(items, index, right, animations);\n        }\n    }\n    return items;\n}\n\nexport function insertionSort(arr, animations){\n    for(let i = 0; i < arr.length; i++){\n        let curr = arr[i]\n        let j = i - 1\n\n        while (j >= 0 && arr[j] > curr) {\n            arr[j + 1] = arr[j]\n            animations.push([j, j+1])\n            j--\n        }\n\n        arr[j + 1] = curr\n    }\n    return animations;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}