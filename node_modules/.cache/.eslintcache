[{"/Users/Jake.Squier/SE-Projects/sorting-visualizer/Sorting-Visualizer/src/index.js":"1","/Users/Jake.Squier/SE-Projects/sorting-visualizer/Sorting-Visualizer/src/App.js":"2","/Users/Jake.Squier/SE-Projects/sorting-visualizer/Sorting-Visualizer/src/reportWebVitals.js":"3","/Users/Jake.Squier/SE-Projects/sorting-visualizer/Sorting-Visualizer/src/Visualizer.js":"4","/Users/Jake.Squier/SE-Projects/sorting-visualizer/Sorting-Visualizer/src/sortingAlgorithims.js":"5","/Users/Jake.Squier/SE-Projects/sorting-visualizer/Sorting-Visualizer/src/components/NavBar.js":"6"},{"size":502,"mtime":1660824668252,"results":"7","hashOfConfig":"8"},{"size":203,"mtime":1660824668251,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1660824668253,"results":"10","hashOfConfig":"8"},{"size":24229,"mtime":1660824668251,"results":"11","hashOfConfig":"8"},{"size":3918,"mtime":1660824668253,"results":"12","hashOfConfig":"8"},{"size":2491,"mtime":1660824668252,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17xhatj",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":47,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Jake.Squier/SE-Projects/sorting-visualizer/Sorting-Visualizer/src/index.js",[],"/Users/Jake.Squier/SE-Projects/sorting-visualizer/Sorting-Visualizer/src/App.js",[],"/Users/Jake.Squier/SE-Projects/sorting-visualizer/Sorting-Visualizer/src/reportWebVitals.js",[],"/Users/Jake.Squier/SE-Projects/sorting-visualizer/Sorting-Visualizer/src/Visualizer.js",["28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"import React, { Component} from 'react';\nimport Navbar from './components/NavBar';\nimport { bubbleSort, mergeSort, quickSort, insertionSort } from './sortingAlgorithims';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport './styles/visualizer.css'\n\n\nfunction sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nclass Visualizer extends Component{\n\n    state = {\n        array: [],\n        arrRange: 300,\n        arrSize: 50,\n        animationSpeed: 16,\n        play: false,\n        animations: [],\n        currAnimations: [],\n        isSorted: false,\n        showNav: true,\n        isSorting: false,\n        currAlg: 'Bubble-Sort',\n        fadeIn: false,\n        cout: 0\n    };\n\n    componentDidMount() {\n        this.resetArray();\n        document.getElementsByClassName('.slider').value = this.state.arrSize\n    }\n\n    previousArr = []\n\n    resetArray = (e, newArr=null) => {\n        this.state.fadeIn = false\n        var arr = [];\n        let amt = this.state.arrSize\n        if(newArr===null){\n            for (let i = 0; i < amt - 1; i++){\n                arr.push(this.randomIntFromInterval(10, this.state.arrRange));\n            }\n        } else {\n            arr = newArr\n        }\n        console.log(arr)\n        setTimeout(() => {\n            const arrBars = document.getElementsByClassName('arr-bar')\n            for(let i = 0; i < arrBars.length; i++){\n                arrBars[i].style.backgroundColor = '#19bc8b'\n            }\n        }, 200)\n        const progressBar = document.querySelector('#bar')\n        progressBar.value = 0\n        progressBar.max = arr.length\n        this.previousArr = arr\n        this.setState({array: arr, isSorted: false, fadeIn: true});\n    }\n\n    repeatArr = () => {\n        const newArr = this.previousArr\n        this.resetArray(null, newArr)\n\n    }\n\n    changeArrSize = (e) => {\n        this.setState({arrSize: e.target.value})\n        this.resetArray()\n    }\n\n    changeAnimationSpeed = (e) => {\n        this.setState({animationSpeed: e.target.value})\n    }\n\n    randomIntFromInterval(min, max) {\n        var _min = Math.floor(min);\n        var _max = Math.ceil(max);\n        return Math.floor(Math.random() * (_max - _min) + _min);\n    }\n\n    animateBubbleSort = async (e, remaining=[]) =>{\n        if(!this.state.isSorted){\n            this.state.isSorted = true\n            this.state.isSorting = true\n            let arr = [...this.state.array]\n            let len = this.state.array.length;\n            let animations = [];\n            const progressBar = document.querySelector('#bar')\n            if(remaining.length < 1){\n                for(let i = 0;i < this.state.arrSize; i++){\n                    bubbleSort(arr, animations, i, (i+1===arr.length));\n                    arr = [...arr]  \n                    progressBar.max = animations.length\n                    this.state.animations = animations\n                }\n            } else {\n                animations = remaining\n                this.state.play = true\n            }\n            for(let i = 0; i < animations.length; i++){\n                if(this.state.play === true){\n                    const arrBars = document.getElementsByClassName('arr-bar');\n                    var currAnime = animations[i];\n                    const barOne = arrBars[currAnime[0]];\n                    const barTwo = arrBars[currAnime[1]];\n                    if(currAnime[2]){\n                        barOne.style.backgroundColor = 'red';\n                        barTwo.style.backgroundColor = 'aquamarine';\n                        await sleep(this.state.animationSpeed);\n                        var temp = barOne.style.height;\n                        barOne.style.height = barTwo.style.height;\n                        barTwo.style.height = temp;\n                        barOne.style.backgroundColor = 'aquamarine';\n                    } else {\n                        barOne.style.backgroundColor = 'aquamarine';\n                        barTwo.style.backgroundColor = 'aquamarine';\n                        await sleep(i*this.state.animationSpeed);\n                    }\n                    progressBar.value++\n                    this.state.currAnimations = [[...animations.slice(i, animations.length)], this.animateBubbleSort, i, animations]\n                } else {\n                    this.state.isSorting = false\n                    this.state.currAnimations = [[...animations.slice(i, animations.length)], this.animateBubbleSort, i, animations]\n                    return\n                }\n            }\n            this.handleFinish()\n        } else {\n            this.setState({isSorted: false})\n            this.resetArray()\n            return\n        } \n    }\n\n    animateMergeSort = async (e, remaining=[], val=0) => {\n        if(!this.state.isSorted){\n            this.state.isSorted = true;\n            this.state.isSorting = true\n            var animations = []\n            const progressBar = document.querySelector('#bar')\n            const arrayBars = document.getElementsByClassName('arr-bar');\n            if(remaining.length < 1){\n                var arr = [...this.state.array]\n                animations = mergeSort(arr)\n                progressBar.max = animations.length\n                this.state.animations = animations\n            } else {\n                animations = remaining\n                this.state.play = true\n            }\n            for (let i = 0; i < animations.length; i++) {\n                if(this.state.play === true){\n                    if (!animations[i][2]) {\n                        const barOneIdx = animations[i][0]\n                        const barTwoIdx = animations[i][1]\n                        const barOneStyle = arrayBars[barOneIdx].style;\n                        const barTwoStyle = arrayBars[barTwoIdx].style;\n                        var cout = val+i\n                        const color = cout % 3 === 0 ? 'red' : 'aquamarine';\n                        await sleep(this.state.animationSpeed*2)\n                        barOneStyle.backgroundColor = color;\n                        barTwoStyle.backgroundColor = color;\n                    } else {\n                        await sleep(this.state.animationSpeed*2)\n                        const [barOneIdx, newHeight] = animations[i];\n                        const barOneStyle = arrayBars[barOneIdx].style;\n                        barOneStyle.height = `${newHeight}px`;\n                    }\n                    progressBar.value++\n                    this.state.currAnimations = [[...animations.slice(i, animations.length)], this.animateMergeSort, i, animations]\n                } else {\n                    this.state.isSorting = false\n                    this.state.currAnimations = [[...animations.slice(i, animations.length)], this.animateMergeSort, i, animations]\n                    return\n                }\n            }\n            this.handleFinish()\n        } else {\n            this.setState({isSorted: false})\n            this.resetArray()\n            return\n        }\n    }\n\n    animateQuickSort = async (e, remaining=[]) => {\n        if(!this.state.isSorted){\n            this.state.isSorted = true\n            this.state.isSorting = true\n            const progressBar = document.querySelector('#bar')\n            var animations = [];\n            if(remaining.length < 1){\n                var arr = [...this.state.array]\n                quickSort(arr, 0, this.state.array.length - 1, animations); \n                progressBar.max = animations.length\n                this.state.animations = animations\n            } else {\n                animations = remaining\n                this.state.play = true\n            }\n            for(let i = 0; i < animations.length; i++) {  \n                if(this.state.play === true){\n                    var animation = animations[i]  \n                    const arrBars = document.getElementsByClassName('arr-bar');\n                    const barOne = arrBars[animation[0]];\n                    const barTwo = arrBars[animation[1]];\n                    barOne.style.backgroundColor = 'red';\n                    barTwo.style.backgroundColor = 'aquamarine';\n                    await sleep(this.state.animationSpeed);\n                    var temp = barOne.style.height;\n                    barOne.style.height = barTwo.style.height;\n                    barTwo.style.height = temp;\n                    await sleep(4)\n                    barOne.style.backgroundColor = 'aquamarine';\n                    progressBar.value++\n                    this.state.currAnimations = [[...animations.slice(i, animations.length)], this.animateQuickSort, i, animations]\n                } else {\n                    this.state.isSorting = false\n                    this.state.currAnimations = [[...animations.slice(i, animations.length)], this.animateQuickSort, i, animations]\n                    return\n                }\n            }\n            this.handleFinish()\n        } else {\n            this.setState({isSorted: false})\n            this.resetArray()\n            return\n        } \n    }\n\n    animateInsertionSort = async (e, remaining=[]) => {\n        if(!this.state.isSorted){\n            this.state.isSorting = true\n            this.state.isSorted = true\n            var animations = []\n            const progressBar = document.querySelector('#bar')\n            if(remaining.length < 1){\n                var arr = [...this.state.array]\n                insertionSort(arr, animations)\n                progressBar.max = animations.length\n                this.state.animations = animations\n            } else {\n                animations = remaining\n                this.state.play = true\n            }\n            for(let i = 0; i < animations.length; i++){\n                if(this.state.play === true){\n                    var animation = animations[i];\n                    const arrBars = document.getElementsByClassName('arr-bar');\n                    const barOne = arrBars[animation[0]];\n                    const barTwo = arrBars[animation[1]];\n                    barOne.style.backgroundColor = 'red';\n                    barTwo.style.backgroundColor = 'aquamarine';\n                    await sleep(this.state.animationSpeed);\n                    var temp = barOne.style.height;\n                    barOne.style.height = barTwo.style.height;\n                    barTwo.style.height = temp;\n                    await sleep(4)\n                    barOne.style.backgroundColor = 'aquamarine';\n                    progressBar.value++\n                    this.state.currAnimations = [[...animations.slice(i, animations.length)], this.animateInsertionSort, i, animations]\n                } else {\n                    this.state.isSorting = false\n                    this.state.currAnimations = [[...animations.slice(i, animations.length)], this.animateInsertionSort, i, animations]\n                    return\n                }\n            }\n            this.handleFinish()\n        } else {\n            this.resetArray()\n            this.setState({isSorted: false})\n            return\n        }\n    }\n\n    handleFinish = () => {\n        this.setState({currAnimations: [], isSorting: false, currAlg: 'null', play: false})\n    }\n\n    handlePause = (e) => {\n        var curr = this.state.play\n        this.setState({play: !curr})\n        if(!this.state.isSorted){\n            if(this.state.currAlg === 'Bubble-Sort'){\n                this.state.play = true\n                this.animateBubbleSort()\n            } else if(this.state.currAlg === 'Merge-Sort'){\n                this.state.play = true\n                this.animateMergeSort()\n            } else if(this.state.currAlg === 'Quick-Sort'){\n                this.state.play = true\n                this.animateQuickSort()\n            } else if(this.state.currAlg ==='Insertion-Sort'){\n                this.state.play = true\n                this.animateInsertionSort()\n            } else {\n                this.state.currAlg = 'null'\n            }\n        } else {\n            if(!curr && this.state.currAnimations != []){\n                var remaining = this.state.currAnimations[0]\n                var func = this.state.currAnimations[1]\n                var i = this.state.currAnimations[2]\n                this.state.isSorted = false\n                if(this.state.currAnimations[0]){\n                    func(null, remaining, i)\n                }\n            }\n        }\n    }\n\n    handleSkip = async (e) => {\n        const progressBar = document.querySelector('#bar')\n        if(!this.state.isSorting && this.state.currAnimations[0].length > 0 && this.state.currAlg != 'Merge-Sort' && !this.state.play){\n            const arrBars = document.getElementsByClassName('arr-bar');\n            var animations = this.state.currAnimations[0]\n            const currSkip = animations[0]\n            const barOne = arrBars[currSkip[0]]\n            const barTwo = arrBars[currSkip[1]]\n            barOne.style.backgroundColor = 'red'\n            barTwo.style.backgroundColor = 'aquamarine'\n            await sleep(this.state.animationSpeed*2)\n            var temp = barOne.style.height;\n            barOne.style.height = barTwo.style.height;\n            barTwo.style.height = temp;\n            await sleep(4)\n            barOne.style.backgroundColor = 'aquamarine';\n            progressBar.value++\n            this.setState({currAnimations: [[...animations.slice(1, animations.length)], this.state.currAnimations[1], this.state.currAnimations[2], currSkip]})\n        } else if(this.state.currAlg === 'Merge-Sort' && !this.state.play && this.state.currAnimations[0].length > 0) {\n            const arrayBars = document.getElementsByClassName('arr-bar');\n            const data = this.state.currAnimations\n            var animations = data[0]\n            const currSkip = data[0][0]\n            if (!currSkip[2]) {\n                const barOneIdx = currSkip[0]\n                const barTwoIdx = currSkip[1]\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = data[2] % 3 === 0 ? 'red' : 'aquamarine';\n                await sleep(this.state.animationSpeed*2)\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n            } else {\n                await sleep(this.state.animationSpeed*2)\n                const [barOneIdx, newHeight] = currSkip;\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n            }\n            progressBar.value++\n            this.setState({currAnimations: [[...animations.slice(1, animations.length)], data[1], data[2], currSkip]})\n        }\n    }\n\n    handlePrevious = async (e) => {\n        const progressBar = document.querySelector('#bar')\n        const arrBars = document.getElementsByClassName('arr-bar');\n        if(!this.state.isSorting && this.state.currAnimations[0] && this.state.currAlg != 'Merge-Sort' && !this.state.play && this.state.currAnimations[0].length > 0) {\n            var animations = this.state.animations\n            var currAnime = this.state.currAnimations\n            var idx = animations.length - currAnime[0].length\n            var newAnimations = [...animations.slice(idx-1, animations.length)]\n            console.log(newAnimations.length, animations.length)\n            if(newAnimations.length === 1){\n                this.setState({isSorted: false, isSorting: false})\n                for(let i = 0; i < arrBars.length; i++){\n                    await sleep(50)\n                    arrBars[i].style.backgroundColor = '#19bc8b'\n                }\n                return\n            }\n            const barOne = arrBars[newAnimations[0][0]]\n            const barTwo = arrBars[newAnimations[0][1]]\n            barOne.style.backgroundColor = '#19bc8b'\n            barTwo.style.backgroundColor = '#19bc8b'\n            await sleep(this.state.animationSpeed*2)\n            var temp = barOne.style.height;\n            barOne.style.height = barTwo.style.height;\n            barTwo.style.height = temp;\n            await sleep(4)\n            barOne.style.backgroundColor = 'aquamarine';\n            progressBar.val--\n            this.setState({currAnimations: [newAnimations, this.state.currAnimations[1], this.state.currAnimations[2], newAnimations[0]]})\n        } else if(this.state.currAlg === 'Merge-Sort' && !this.state.play) {\n            const arrayBars = document.getElementsByClassName('arr-bar');\n            const data = this.state.currAnimations\n            var animations = this.state.animations\n            var idx = animations.length - data[0].length\n            var newAnimations = [...animations.slice(idx-1, animations.length)]\n            var currSkip = newAnimations[0]\n            if(newAnimations.length === 1){\n                this.setState({isSorted: false, isSorting: false})\n                for(let i = 0; i < arrBars.length; i++){\n                    await sleep(50)\n                    arrBars[i].style.backgroundColor = '#19bc8b'\n                }\n                return\n            }\n            console.log(currSkip)\n            if (!currSkip[2]) {\n                const barOneIdx = currSkip[0]\n                const barTwoIdx = currSkip[1]\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = data[2] % 3 === 0 ? '#19bc8b' : '#19bc8b';\n                await sleep(this.state.animationSpeed*2)\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n            } else {\n                await sleep(this.state.animationSpeed*2)\n                const barOneIdx = currSkip[0]\n                const newHeight = currSkip[3]\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n            }\n            progressBar.value--\n            this.setState({currAnimations: [newAnimations, this.state.currAnimations[1], this.state.currAnimations[2], newAnimations[0]]})\n        }\n    }\n\n    handleNavToggle = (e) => {\n        this.setState({showNav: !this.state.showNav})\n    }\n//\n    handleSelected = async (e) => {\n        e.target.className = `${e.target.className} selected`\n    }\n    \n    render(){\n\n        var playVal = this.state.play\n\n        return(\n            <div id=\"mainContainer\">\n                <Navbar state={this.state} handleSelected={this.handleSelected} handleNavToggle={this.handleNavToggle} handlePause={this.handlePause} reset={this.resetArray} bubbleSort={this.animateBubbleSort} mergeSort={this.animateMergeSort} quickSort={this.animateQuickSort}  insertionSort={this.animateInsertionSort} changeArrSize={this.changeArrSize} changeAnimationSpeed={this.changeAnimationSpeed}/>\n                <div className=\"projectContainer\">\n                    <div className='visualizer-wrapper'>\n                        <div className=\"infoContainer\">\n                            <p className='infoStatic'>Current-algorithim: <span className=\"infoDynamic\">{this.state.currAlg}</span></p>\n                        </div>\n                        <div className=\"topContainer\">\n                            <div className=\"arrContainer\">\n                                {this.state.array.map((val, idx) => {\n                                    return (\n                                        <CSSTransition\n                                            in={true}\n                                            appear={true}\n                                            timeout={1000}\n                                            classNames=\"bar-\"\n                                        >\n                                            <div className='arr-bar' id=\"show\" key={idx} style={{height: `${val}px`}}/>\n                                        </CSSTransition>\n                                    )\n                                })}\n                            </div>\n                            <progress className=\"progressBar\" id='bar' value={0} max={100}/>\n                        </div>\n                    </div>\n                    <div className=\"controlsContainer\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" onClick={this.repeatArr} style={{marginTop: '-2px', marginRight: '5px'}} cursor=\"pointer\" color=\"aquamarine\" width='18' fill=\"currentColor\" class=\"bi bi-arrow-repeat\" viewBox=\"0 0 16 16\">\n                            <path d=\"M11.534 7h3.932a.25.25 0 0 1 .192.41l-1.966 2.36a.25.25 0 0 1-.384 0l-1.966-2.36a.25.25 0 0 1 .192-.41zm-11 2h3.932a.25.25 0 0 0 .192-.41L2.692 6.23a.25.25 0 0 0-.384 0L.342 8.59A.25.25 0 0 0 .534 9z\"/>\n                            <path fill-rule=\"evenodd\" d=\"M8 3c-1.552 0-2.94.707-3.857 1.818a.5.5 0 1 1-.771-.636A6.002 6.002 0 0 1 13.917 7H12.9A5.002 5.002 0 0 0 8 3zM3.1 9a5.002 5.002 0 0 0 8.757 2.182.5.5 0 1 1 .771.636A6.002 6.002 0 0 1 2.083 9H3.1z\"/>\n                        </svg>\n                        <a onClick={this.handlePrevious}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" style={{marginTop: '5px'}} cursor=\"pointer\" color=\"aquamarine\" width=\"52\" className=\"previousBtn\" fill=\"currentColor\" class=\"bi bi-skip-start-fill\" viewBox=\"0 0 16 16\">\n                                <path d=\"M4 4a.5.5 0 0 1 1 0v3.248l6.267-3.636c.54-.313 1.232.066 1.232.696v7.384c0 .63-.692 1.01-1.232.697L5 8.753V12a.5.5 0 0 1-1 0V4z\"/>\n                            </svg>\n                        </a>\n                        <a className=\"ppBtn\" onClick={this.handlePause}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" class=\"bi bi-play-circle-fill\" viewBox=\"0 0 16 16\" className='playBtn'>\n                                {playVal \n                                ? <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM6.25 5C5.56 5 5 5.56 5 6.25v3.5a1.25 1.25 0 1 0 2.5 0v-3.5C7.5 5.56 6.94 5 6.25 5zm3.5 0c-.69 0-1.25.56-1.25 1.25v3.5a1.25 1.25 0 1 0 2.5 0v-3.5C11 5.56 10.44 5 9.75 5z\"/>\n                                :  <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM6.79 5.093A.5.5 0 0 0 6 5.5v5a.5.5 0 0 0 .79.407l3.5-2.5a.5.5 0 0 0 0-.814l-3.5-2.5z\"/>\n                                }\n                            </svg>\n                        </a>\n                        <a onClick={this.handleSkip}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" style={{marginTop: '5px'}} cursor=\"pointer\" color=\"aquamarine\" width=\"50\" className=\"skipBtn\" fill=\"currentColor\" class=\"bi bi-skip-end-fill\" viewBox=\"0 0 16 16\">\n                                <path d=\"M12.5 4a.5.5 0 0 0-1 0v3.248L5.233 3.612C4.693 3.3 4 3.678 4 4.308v7.384c0 .63.692 1.01 1.233.697L11.5 8.753V12a.5.5 0 0 0 1 0V4z\"/>\n                            </svg>\n                        </a>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" onClick={this.resetArray} style={{marginTop: '-2px', marginLeft: '5px'}} cursor=\"pointer\" color=\"aquamarine\" width='16' fill=\"currentColor\" class=\"bi bi-shuffle\" viewBox=\"0 0 16 16\">\n                            <path fill-rule=\"evenodd\" d=\"M0 3.5A.5.5 0 0 1 .5 3H1c2.202 0 3.827 1.24 4.874 2.418.49.552.865 1.102 1.126 1.532.26-.43.636-.98 1.126-1.532C9.173 4.24 10.798 3 13 3v1c-1.798 0-3.173 1.01-4.126 2.082A9.624 9.624 0 0 0 7.556 8a9.624 9.624 0 0 0 1.317 1.918C9.828 10.99 11.204 12 13 12v1c-2.202 0-3.827-1.24-4.874-2.418A10.595 10.595 0 0 1 7 9.05c-.26.43-.636.98-1.126 1.532C4.827 11.76 3.202 13 1 13H.5a.5.5 0 0 1 0-1H1c1.798 0 3.173-1.01 4.126-2.082A9.624 9.624 0 0 0 6.444 8a9.624 9.624 0 0 0-1.317-1.918C4.172 5.01 2.796 4 1 4H.5a.5.5 0 0 1-.5-.5z\"/>\n                            <path d=\"M13 5.466V1.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384l-2.36 1.966a.25.25 0 0 1-.41-.192zm0 9v-3.932a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384l-2.36 1.966a.25.25 0 0 1-.41-.192z\"/>\n                        </svg>\n                        <p className=\"animated bounce\" id=\"playPrompt\" style={{visibility: `${playVal ? 'hidden' : 'visible'}`}}>Click-me!</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Visualizer;","/Users/Jake.Squier/SE-Projects/sorting-visualizer/Sorting-Visualizer/src/sortingAlgorithims.js",["75"],"//\nexport function bubbleSort(arr, animations, cout){\n    let i = 0;\n    let j = 0;\n    if (i < arr.length) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          let a = arr[j];\n          let b = arr[j + 1];\n          if (a > b) {\n            swap(arr, j, j + 1);\n            animations.push([j, j+1, true, cout])\n          }\n        }\n      } else {\n        i = 0;\n        return animations;\n      }\n      i++;\n      return animations;\n}\n\nconst swap = (arr, a, b) => {\n    let temp = arr[a];\n    arr[a] = arr[b];\n    arr[b] = temp;\n};\n\nexport function mergeSort(arr){\n    const animations = [];\n    if(arr.length <= 1) return arr;\n    const auxArr = arr.slice();\n    mergeSortHelper(arr, 0, arr.length - 1, auxArr, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxArr,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxArr, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxArr, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxArr, animations);\n}\n//\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j, false]);\n    animations.push([i, j, false]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      //swaping below\n      animations.push([k, auxiliaryArray[i], true, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      //swaping below\n      animations.push([k, auxiliaryArray[j], true, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i, false]);\n    animations.push([i, i, false]);\n    //swaping below\n    console.log(auxiliaryArray[i], i)\n    animations.push([k, auxiliaryArray[i], true, auxiliaryArray[k]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j, false]);\n    animations.push([j, j, false]);\n    //swapping below\n    console.log(auxiliaryArray[j], mainArray[j])\n    animations.push([k, auxiliaryArray[j], true,  auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nfunction quickSwap(items, leftIndex, rightIndex) {\n    var temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n}\n\nfunction partition(items, left, right, animations) {\n    var pivot   = items[Math.floor((right + left) / 2)], //middle element\n    i       = left, //left pointer\n    j       = right; //right pointer\n    while (i <= j) {\n        while (items[i] < pivot) {\n            i++;\n        }\n        while (items[j] > pivot) {\n            j--;\n        }\n        if (i <= j) {\n            quickSwap(items, i, j); //swapping two elements\n            animations.push([i, j, true])\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\nexport function quickSort(items, left, right, animations) {\n    var index;\n    if (items.length > 1) {\n        index = partition(items, left, right, animations); //index returned from partition\n        if (left < index - 1) { //more elements on the left side of the pivot\n            quickSort(items, left, index - 1, animations);\n        }\n        if (index < right) { //more elements on the right side of the pivot\n            quickSort(items, index, right, animations);\n        }\n    }\n    return items;\n}\n\nexport function insertionSort(arr, animations){\n    for(let i = 0; i < arr.length; i++){\n        let curr = arr[i]\n        let j = i - 1\n\n        while (j >= 0 && arr[j] > curr) {\n            arr[j + 1] = arr[j]\n            animations.push([j, j+1])\n            j--\n        }\n\n        arr[j + 1] = curr\n    }\n    return animations;\n}\n","/Users/Jake.Squier/SE-Projects/sorting-visualizer/Sorting-Visualizer/src/components/NavBar.js",[],{"ruleId":"76","severity":1,"message":"77","line":4,"column":25,"nodeType":"78","messageId":"79","endLine":4,"endColumn":40},{"ruleId":"80","severity":1,"message":"81","line":38,"column":9,"nodeType":"82","endLine":38,"endColumn":19},{"ruleId":"80","severity":1,"message":"81","line":85,"column":13,"nodeType":"82","endLine":85,"endColumn":23},{"ruleId":"80","severity":1,"message":"81","line":86,"column":13,"nodeType":"82","endLine":86,"endColumn":23},{"ruleId":"76","severity":1,"message":"83","line":88,"column":17,"nodeType":"78","messageId":"79","endLine":88,"endColumn":20},{"ruleId":"80","severity":1,"message":"81","line":96,"column":21,"nodeType":"82","endLine":96,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":100,"column":17,"nodeType":"82","endLine":100,"endColumn":27},{"ruleId":"80","severity":1,"message":"81","line":122,"column":21,"nodeType":"82","endLine":122,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":124,"column":21,"nodeType":"82","endLine":124,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":125,"column":21,"nodeType":"82","endLine":125,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":139,"column":13,"nodeType":"82","endLine":139,"endColumn":23},{"ruleId":"80","severity":1,"message":"81","line":140,"column":13,"nodeType":"82","endLine":140,"endColumn":23},{"ruleId":"80","severity":1,"message":"81","line":148,"column":17,"nodeType":"82","endLine":148,"endColumn":27},{"ruleId":"80","severity":1,"message":"81","line":151,"column":17,"nodeType":"82","endLine":151,"endColumn":27},{"ruleId":"80","severity":1,"message":"81","line":172,"column":21,"nodeType":"82","endLine":172,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":174,"column":21,"nodeType":"82","endLine":174,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":175,"column":21,"nodeType":"82","endLine":175,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":189,"column":13,"nodeType":"82","endLine":189,"endColumn":23},{"ruleId":"80","severity":1,"message":"81","line":190,"column":13,"nodeType":"82","endLine":190,"endColumn":23},{"ruleId":"80","severity":1,"message":"81","line":197,"column":17,"nodeType":"82","endLine":197,"endColumn":27},{"ruleId":"80","severity":1,"message":"81","line":200,"column":17,"nodeType":"82","endLine":200,"endColumn":27},{"ruleId":"80","severity":1,"message":"81","line":217,"column":21,"nodeType":"82","endLine":217,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":219,"column":21,"nodeType":"82","endLine":219,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":220,"column":21,"nodeType":"82","endLine":220,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":234,"column":13,"nodeType":"82","endLine":234,"endColumn":23},{"ruleId":"80","severity":1,"message":"81","line":235,"column":13,"nodeType":"82","endLine":235,"endColumn":23},{"ruleId":"80","severity":1,"message":"81","line":242,"column":17,"nodeType":"82","endLine":242,"endColumn":27},{"ruleId":"80","severity":1,"message":"81","line":245,"column":17,"nodeType":"82","endLine":245,"endColumn":27},{"ruleId":"80","severity":1,"message":"81","line":262,"column":21,"nodeType":"82","endLine":262,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":264,"column":21,"nodeType":"82","endLine":264,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":265,"column":21,"nodeType":"82","endLine":265,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":286,"column":17,"nodeType":"82","endLine":286,"endColumn":27},{"ruleId":"80","severity":1,"message":"81","line":289,"column":17,"nodeType":"82","endLine":289,"endColumn":27},{"ruleId":"80","severity":1,"message":"81","line":292,"column":17,"nodeType":"82","endLine":292,"endColumn":27},{"ruleId":"80","severity":1,"message":"81","line":295,"column":17,"nodeType":"82","endLine":295,"endColumn":27},{"ruleId":"80","severity":1,"message":"81","line":298,"column":17,"nodeType":"82","endLine":298,"endColumn":27},{"ruleId":"84","severity":1,"message":"85","line":301,"column":51,"nodeType":"86","messageId":"87","endLine":301,"endColumn":53},{"ruleId":"80","severity":1,"message":"81","line":305,"column":17,"nodeType":"82","endLine":305,"endColumn":27},{"ruleId":"84","severity":1,"message":"85","line":315,"column":99,"nodeType":"86","messageId":"87","endLine":315,"endColumn":101},{"ruleId":"88","severity":1,"message":"89","line":334,"column":17,"nodeType":"78","messageId":"90","endLine":334,"endColumn":27},{"ruleId":"84","severity":1,"message":"85","line":359,"column":88,"nodeType":"86","messageId":"87","endLine":359,"endColumn":90},{"ruleId":"88","severity":1,"message":"89","line":388,"column":17,"nodeType":"78","messageId":"90","endLine":388,"endColumn":27},{"ruleId":"88","severity":1,"message":"91","line":389,"column":17,"nodeType":"78","messageId":"90","endLine":389,"endColumn":20},{"ruleId":"88","severity":1,"message":"92","line":390,"column":17,"nodeType":"78","messageId":"90","endLine":390,"endColumn":30},{"ruleId":"93","severity":1,"message":"94","line":465,"column":25,"nodeType":"95","endLine":465,"endColumn":58},{"ruleId":"93","severity":1,"message":"94","line":470,"column":25,"nodeType":"95","endLine":470,"endColumn":73},{"ruleId":"93","severity":1,"message":"94","line":478,"column":25,"nodeType":"95","endLine":478,"endColumn":54},{"ruleId":"76","severity":1,"message":"96","line":4,"column":9,"nodeType":"78","messageId":"79","endLine":4,"endColumn":10},"no-unused-vars","'TransitionGroup' is defined but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'len' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'animations' is already defined.","redeclared","'idx' is already defined.","'newAnimations' is already defined.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'j' is assigned a value but never used."]